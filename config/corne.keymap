/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>

&mmv {
  acceleration-exponent = <1>;
  time-to-max-speed-ms = <120>;
  delay-ms = <0>;
};

&msc {
  acceleration-exponent = <1>;
  time-to-max-speed-ms = <500>;
  delay-ms = <0>;
};

&mt {
  tapping-term-ms = <200>;
  flavor = "tap-preferred";
};

/ {
    combos {
        compatible = "zmk,combos";
        /* cpslck { */
        /*     bindings = <&kp CAPSLOCK>; */
        /*     key-positions = <24 35>; */
        /*     layers = <0>; */
        /* }; */

        /* astrsk { */
        /*     bindings = <&kp ASTERISK>; */
        /*     key-positions = <3 8>; */
        /*     layers = <0>; */
        /* }; */

        /* dollar { */
        /*     bindings = <&kp DOLLAR>; */
        /*     key-positions = <15 20>; */
        /*     layers = <0>; */
        /* }; */


        /* excl { */
        /*     bindings = <&kp EXCL>; */
        /*     key-positions = <27 32>; */
        /*     layers = <0>; */
        /* }; */

        /* ampersand { */
        /*     bindings = <&kp AMPERSAND>; */
        /*     key-positions = <17 18>; */
        /*     layers = <0>; */
        /* }; */

       /*  less_than { */
       /*      bindings = <&kp LESS_THAN>; */
       /*      key-positions = <2 3>; // we */
       /*      layers = <0>; */
       /*  }; */
       /**/
       /*  bigger_than { */
       /*      bindings = <&kp GREATER_THAN>; */
       /*      key-positions = <8 9>; // io */
       /*      layers = <0>; */
       /* }; */
       /**/
       /* semcol { */
       /*     bindings = <&kp SEMI>; */
       /*     key-positions = <32 33>; // ,. */
       /*     layers = <0>; */
       /* }; */
       /**/
       /* colon { */
       /*     bindings = <&kp COLON>; */
       /*     key-positions = <20 21>; // kl */
       /*     layers = <0>; */
       /* }; */

        /* parentheses_left { */
        /*     bindings = <&kp LEFT_PARENTHESIS>; */
        /*     key-positions = <16 15>; // DF */
        /*     layers = <0>; */
        /* }; */
        /**/
        /* parentheses_right { */
        /*     bindings = <&kp RIGHT_PARENTHESIS>; */
        /*     key-positions = <19 20>; // JK */
        /*     layers = <0>; */
        /* }; */

        /* bracket_left { */
        /*     bindings = <&kp LEFT_BRACKET>; */
        /*     key-positions = <3 4>; //ER */
        /*     layers = <0>; */
        /* }; */
        /**/
        /* bracket_right { */
        /*     bindings = <&kp RIGHT_BRACKET>; */
        /*     key-positions = <8 7>; // UI */
        /*     layers = <0>; */
        /* }; */

        /* brace_left { */
        /*     bindings = <&kp LEFT_BRACE>; */
        /*     key-positions = <27 28>; // cv */
        /*     layers = <0>; */
        /* }; */
        /**/
        /* brace_right { */
        /*     bindings = <&kp RIGHT_BRACE>; */
        /*     key-positions = <31 32>; // m, */
        /*     layers = <0>; */
        /* }; */

       sqt {
           bindings = <&kp SINGLE_QUOTE>;
           key-positions = <29 30>; // bn
           layers = <0>;
       };

       dqt {
           bindings = <&kp DOUBLE_QUOTES>;
           key-positions = <28 31>; // vm
           layers = <0>;
       };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <21 22>; // l:
            layers = <0>;
        };

        hyphen {
            bindings = <&kp MINUS>;
            key-positions = <16 19>; // fj
            layers = <0>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>; // ru
            key-positions = <4 7>;
            layers = <0>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <5 6>; // ty
            layers = <0>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <17 18>; // gh
            layers = <0>;
        };


        Pipe {
            bindings = <&kp PIPE>;
            key-positions = <15 14>; // sd
            layers = <0>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <27 26>; // xc
            layers = <0>;
        };


        tilde {
            bindings = <&kp TILDE>;
            key-positions = <14 13>; // as
            layers = <0>;
        };
    };

        conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
          };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// | TAB  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | ESC  |
// | ctrl |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  :  | met  |
// | shft |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | DEL  |
//                    | ALT | LWR |SPC  |   | ENT | RSE  | BKSP|              
                        bindings = <                                          
   &kp TAB &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I  &kp O   &kp P    &kp ESC
   &kp LCTRL &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K  &kp L   &kp COLON  &kp LGUI
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp DEL
                  &kp LALT &mo 1 &kp SPACE   &kp RET &mo 2 &kp BSPC
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// | del  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |  "   |
// | ctrl |  |  |  [  | {   |  (  |  _  |   | LFT | DWN |  UP | RGT |  ~  |  '   |
// | shft |  \  |  ]  | }   |  )  |  -  |   |  +  |  /  |   * |  =  |     |  `   |
//                    | ALT |     | SPC |   | ENT |     | BKSP |
                        bindings = <
   &kp DEL   &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp DQT
   &kp LCTRL &kp PIPE  &kp LEFT_BRACKET  &kp LEFT_BRACE   &kp LEFT_PARENTHESIS  &kp UNDERSCORE   &kp LEFT &kp DOWN &kp UP &kp RIGHT &kp TILDE &kp SQT
   &kp LSHFT  &kp BACKSLASH   &kp RIGHT_BRACKET &kp RIGHT_BRACE   &kp RIGHT_PARENTHESIS   &kp MINUS     &kp PLUS   &kp FSLH   &kp STAR &kp EQUAL &trans &kp GRAVE
                                    &kp LALT     &trans       &kp SPACE      &kp RET  &trans   &kp BSPC
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |      |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |     |     |      |
// |      |     |     |     |     |     |   | HOME|pg_dn|pd_up| END |     |      |
// |      |     |     |     |     |     |   |     |     |     |     |     |      |
//                    |     |     |     |   |     |     |     |
                        bindings = <
   &trans  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT       &kp CARET &kp AMPS  &kp STAR &trans &trans &trans
   &trans &trans &trans  &trans   &trans  &trans        &kp HOME &kp PG_DN &kp PG_UP &kp END  &trans   &trans
   &trans &trans   &trans &trans   &trans   &trans       &trans &trans &trans &trans  &trans   &trans
                             &trans  &trans   &trans   &trans   &trans    &trans
                        >;
                };

                tri_layer {
// -----------------------------------------------------------------------------------------
// |  TAB | F1  | F2  | F3  | F4  | F5  |   | F6  | F7  | F8  | F9  | F10 |  DEL |
// | CTRL | F11 | F12 |     | LCKL| RCKL|   |m_lft|m_dn |m_up |m_rgt|     | prnt |
// | SHFT |BTCLR|     |     | s_dn| s_up|   | BT1 | BT2 | BT3 | BT4 | BT5 | GUI  |
//                    | ALT |     | SPC |   | ENT |     |BKSP |
                        bindings = <
   &kp TAB  &kp F1   &kp F2 &kp F3   &kp F4   &kp F5       &kp F6   &kp F7 &kp F8   &kp F9   &kp F10 &kp DEL
   &kp LCTRL &kp F11   &kp F12 &trans   &mkp LCLK   &mkp RCLK                      &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_UP &mmv MOVE_RIGHT  &trans   &kp PSCRN
   &kp LSHFT &bt BT_CLR   &trans  &trans  &msc MOVE_UP    &msc MOVE_DOWN       &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &kp LGUI
                             &kp LALT &trans   &kp SPACE   &kp RET   &trans    &kp BSPC
                        >;
                };
        };
};
